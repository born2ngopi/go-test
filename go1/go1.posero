POSERO>> let b:posero_auto_next_line = 0
POSERO>> let b:posero_push_all = 0
POSERO>> let b:posero_fake_type =  "^\$"

                  ____  ___
                / ___| / _ \
                | |  _| | | |
                | |_| | |_| |
                \____ |\___/


      1. what is go?
      2. data type & variabel
      3. array vs slice
      4. looping
      5. function
      6. concurence, chanel, sync
      7. http/tcp


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type ="^\S" 

    what is go?

      Go > create by google in 2007 and published on 2009

      Author > Robert Griesemer
             > Rop Pike
             > Ken Thompson






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"

    What is GO?

      1. staticaly typed
      2. Compilation and Execution speed
      3. concurence not parellelism
      4. gerbage colection
      5. builtin libraries


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "ipython"
POSERO>> set filetype=python

  What is GO?

  echo "export GOPATH=$HOME/your_folder/go" >> ~/.bash_profile
  source ~/.bash_profile

  workspace

  src/  <-- $GOPATH
    github.com/
      your_project/
  bin/
  pkg/



go get github.com/your_project
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = '^\$'
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

    main.go

      package main

      import "fmt"

      func main(){
        //komentar
        fmt.Println("halo guys...")
      }
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

    data type Go

      non-decimal > uint (positif)
                  > int (negatif positif)

      decimal     > float32
                  > float64

      bool
      string
      nil
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

    variabel Go

      var <nama-variabel><tipe-data>
      var <nama-variabel><tipe-data> = <isi>

      var name string = "fossil"

      var number int
      number = 123

      //variabel tanpa tipe data
      name := "fossil"
      number := 123

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  example :
  
      package main

      import "fmt"

      func main(){
        var name string = "chandra"
        age := 19
        fmt.Printf("my name is %s i am %d years old\n",name,age)
      }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

    Array Go
      
      //kapasitas array ditentukan saat membuat array
      var <nama_array> [kapasitas_array]<tipe_data>
      //langsung di insialisasi nilainya
      var <nama_array> = [kapasitas_array]<tipe_data>{nilai1,nilai2}

    example :
      var name [2]string
      name[0] = "chandra"
      name[1] = "agung"
      
      name[2] = "rizky" // <- error(melebihi kapasitas)

      var fruit = [2]string{"apel","jeruk"}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  Array Go

    > make

        var <nama_array> = make([]<tipe_data>,<kapasitas_array>)

      example :

        var name = make([]string,2)
        name[0] = "chandra"
        name[1] = "agung"

    > inisialisasi tanpa kapasitas
      
      [kapasitas_array] -> [...]

      var name = [...]string{"chandra","agung","rizky"}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  Slice GO

    > reference element array

    var name = []string{"chandra","agung","rizky"}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  Array vs Slice
    
    > length
      
      array -> fixed
      slice -> flexible
        //you can add new element using append function

    >array in Go are values.
    >slice in Go are reference types
    

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  Array vs Slice 

    //in array

    func getNewNumbers(numbers [2]int){
      numbers[0] = 3
    }

    func main(){
      var numbers = [2]int{1,2} //<-- array

      getNewNumbers(numbers)
      fmt.Println(numbers) //<--still [1,2]
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  Array vs Slice 

    //in slice

    func getNewNumbers(numbers []int){
      numbers[0] = 3
    }

    func main(){
      var numbers = []int{1,2} //<--slice

      getNewNumbers(numbers)
      fmt.Println(numbers) //<-- [3,2]
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  looping

    looping in go only with for

    for <init>;<condition>;<increment/decrement>{
      statement(s);
    }

    //example
    for i := 0; i < 10; i++{
      fmt.Println(i)
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  but even with just for, we can use it like foreach or while

  >while

    num := 0

    for num < 5{
      fmt.Println(num)
      num++
    }

  >foreach

    var num = []int{1,2,3,4}

    for _, i :=range num{
      fmt.Println(i)
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  break & continue

    var i = 0

    for {

      if i % 2 == 0{
        continue
      }

      if i==11{
        break
      }

      fmt.Println(i)
    }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSERO>> let b:posero_auto_next_line = 1
POSERO>> let b:posero_push_all = 1
POSERO>> let b:posero_fake_type = "^\$"
POSERO>> let b:posero_syntax = "go"
POSERO>> set filetype=go

  function Go

  > keyword func

  example :
    
    func sum(a,b int){
      fmt.Println(a + b)
    }

    // with return value

    func sum(a,b int)int{
      return a + b
    }
